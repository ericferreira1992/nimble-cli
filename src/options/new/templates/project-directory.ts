export const NIMBLE_JSON = 
`{
    "pre-render": {
        "enabled": true,
        "routes": [
			"/",
			"second",
			"third"
        ]
    },
    "vendors": {
        "js": [],
        "css": [
            "src/style.scss"
        ]
    }
}`;

export const README = 
`# Nimble Project
This project was generated with Nimble CLI version [[Version]].

## Development server
Run \`nb serve\` for a dev server. Navigate to \`http://localhost:8090/\`. The app will automatically reload if you change any of the source files.

## Code scaffolding
Run \`nb\`, after select \`Generate\` option.

## Build
Run \`nb build\` to build the project. The build artifacts will be stored in the \`build/\` directory. Use the \`--env\` flag for a specific environment build, for example \`--env=prod\`, the \`--env=local\` is default.
`;

export const PACKAGE_JSON =
`{
    "name": "[[ProjectName]]",
    "version": "1.0.0",
    "scripts": {
        "start": "nb serve",
        "build": "nb build",
        "serve": "nb serve --env=local",
        "serve:dev": "nb serve --env=dev",
        "serve:prod": "nb serve --env=prod",
        "build:dev": "nb build --env=dev",
        "build:prod": "nb build --env=prod"
    },
    "private": true,
    "dependencies": {
        "@nimble-ts/core": "[[NimbleVersion]]"
    },
    "devDependencies": {
        "@nimble-ts/cli": "^[[Version]]",
        "@types/node": "^12.12.7",
        "@types/webpack-env": "^1.14.1",
        "css-loader": "^2.1.1",
        "file-loader": "^3.0.1",
        "html-loader": "^0.5.5",
        "node-sass": "^4.14.1",
        "postcss-loader": "^3.0.0",
        "sass-loader": "^7.1.0",
        "style-loader": "^0.23.1",
        "ts-loader": "^5.4.5",
        "typescript": "^3.9.3"
    }
}
`;

export const TSCONFIG =
`{
    "compileOnSave": false,
    "compilerOptions": {
        "allowJs": true,
        "module": "esnext",
        "target": "es2015",
        "sourceMap": true,
        "baseUrl": "./",
        "outDir": "./dist/",
        "downlevelIteration": true,
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "declaration": false,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "moduleResolution": "node",
        "typeRoots": [
            "node_modules/@types"
        ],
        "lib": [
            "es2017",
            "dom"
        ],
        "paths": {
            "src/*": ["./src/*"]
        }
    },
    "include": [
        "./src/**/*"
    ]
}`;

export const GITIGNORE =
`dist
build

.DS_Store

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
/node_modules/
jspm_packages

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
`;
