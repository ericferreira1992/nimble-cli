{"version":3,"file":"build.js","sourceRoot":"","sources":["../../../src/commands/build/build.ts"],"names":[],"mappings":"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","sourcesContent":["import webpack from 'webpack';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport path from 'path';\nimport { inject, injectable } from 'inversify';\nimport { Logger } from '../../utils/logger.util';\nimport { ArgsResolver } from '../../core/args-resolver';\nimport { webpackConfig } from '../config/webpack.config';\nimport { CLI } from '../../cli';\n\n@injectable()\nexport class Build {\n    private args!: ArgsResolver;\n\n    private DEFAULT_ENV = 'prod';\n    private WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;\n    private WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;\n\n    private get env() { return this.args.getValue('env', this.DEFAULT_ENV) as string; }\n    private get baseHref() { return this.args.getValue('baseHref', '') as string; }\n    private get gziped() { return this.args.getValue('gziped', '') as boolean; }\n\n    constructor(\n        @inject('Logger')  private logger: Logger\n    ) {\n    }\n\n    public async execute(args: string[] = []) {\n        if (!CLI.isNimbleProject()){\n            this.logger.showError('To continue you must be inside a Nimble project.');\n            process.exit(0);\n        }\n        \n        this.args = new ArgsResolver(args);\n\n\t\tlet options = {\n\t\t\tbaseHref: this.baseHref,\n\t\t\tgziped: this.gziped,\n\t\t}\n\t\t\n        const config = await webpackConfig(this.env, options, true);\n\n        this.build(config)\n            .then(\n                ({ stats, warnings }) => {\n                    if (warnings.length) {\n                        console.log(chalk.green(`✔ Compiled successfully`), chalk.yellow(`but with warnings:`));\n\t\t\t\t\t\tconsole.log('____________________________________________________');\n\t\t\t\t\t\tconsole.log();\n                        console.log(warnings.join('\\n\\n'));\n\t\t\t\t\t\tconsole.log('____________________________________________________');\n                        //console.log(`\\nSearch for the ${chalk.underline(chalk.yellow('keywords'))} to learn more about each warning.`);\n                        //console.log(`To ignore, add ${chalk.cyan('// eslint-disable-next-line')} to the line before.\\n`);\n                    } else {\n                        console.log(chalk.green('✔ Compiled successfully!\\n'));\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log();\n\n\t\t\t\t\tlet directoriesSplited = process.cwd().split(path.sep);\t\t\t\n\t\t\t\t\tconsole.log('❯ Directory where the build is:', chalk.yellow(`${directoriesSplited[directoriesSplited.length - 1]}/build`));\n\t\t\t\t\tconsole.log();\n                },\n                err => {\n                    if (err && err.message) {\n                        console.log('');\n                        console.log(err.message);\n                        console.log('');\n                    }\n\n                    const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n                    \n                    if (tscCompileOnError) {\n                        console.log(\n                            chalk.yellow(\n                                'Compiled with the following type errors (you may want to check these before deploying your app):\\n'\n                            )\n                        );\n                        // printBuildError(err);\n                    } else {\n                        console.log(chalk.red('Failed to compile.\\n'));\n                        // printBuildError(err);\n                        process.exit(1);\n                    }\n                }\n            );\n    }\n\n    private build(config: any) {\n\t\tconsole.log('');\n\n        if (process.env.NODE_PATH) {\n            console.log(\n                chalk.yellow(\n                    'Setting NODE_PATH to resolve modules absolutely has been deprecated in favor of setting baseUrl in jsconfig.json (or tsconfig.json if you are using TypeScript) and will be removed in a future major release of create-react-app.'\n                )\n            );\n            console.log();\n        }\n\t\t\n\t\tif (fs.existsSync(`${process.cwd()}/src/environments/env.${this.env}.js`)) {\n\t\t\tconsole.log('❯ Using environment:', chalk.yellow(`src/environments/env.${this.env}`));\t\n\t\t}\n\t\telse {\n\t\t\tconsole.log('❯ Environment:', chalk.red('not found'));\n\t\t}\n\n        console.log(chalk.cyan('❯ Await, creating an optimized production build...'));\n\t\tconsole.log();\n\n        const compiler = webpack(config);\n        return new Promise<{ stats: any, warnings: string[] }>((resolve, reject) => {\n            compiler.run((err, stats) => {\n                let messages;\n                if (err) {\n                    if (!err.message) {\n                        return reject(err);\n                    }\n\n                    let errMessage = err.message;\n\n                    if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {\n                        errMessage +=\n                            '\\nCompileError: Begins at CSS selector ' +\n                            err['postcssNode'].selector;\n                    }\n\n                    messages = this.formatWebpackMessages({\n                        errors: [errMessage],\n                        warnings: [],\n                    });\n\t\t\t\t}\n\t\t\t\telse {\n                    messages = this.formatWebpackMessages(\n                        stats?.toJson({ all: false, warnings: true, errors: true })\n                    );\n                }\n                if (messages.errors.length) {\n                    if (messages.errors.length > 1) {\n                        messages.errors.length = 1;\n                    }\n                    return reject(new Error(messages.errors.join('\\n\\n')));\n                }\n\n                return resolve({ stats, warnings: messages.warnings });\n            });\n        });\n    }\n\n    private formatWebpackMessages(json) {\n        const formattedErrors = json.errors.map((message) => {\n            return this.formatMessage(message);\n        });\n        const formattedWarnings = json.warnings.map((message) => {\n            return this.formatMessage(message);\n        });\n        const result = { errors: formattedErrors, warnings: formattedWarnings };\n        if (result.errors.some(this.isLikelyASyntaxError)) {\n            result.errors = result.errors.filter(this.isLikelyASyntaxError);\n        }\n        return result;\n    }\n\n    private isLikelyASyntaxError(message) {\n        return message.indexOf('Syntax error:') !== -1;\n    }\n\n    private formatMessage(message) {\n        let lines = message.split('\\n');\n        lines = lines.filter(line => !/Module [A-z ]+\\(from/.test(line));\n\n        lines = lines.map(line => {\n            const parsingError = /Line (\\d+):(?:(\\d+):)?\\s*Parsing error: (.+)$/.exec(\n                line\n            );\n            if (!parsingError) {\n                return line;\n            }\n            const [, errorLine, errorColumn, errorMessage] = parsingError;\n            return `${'Syntax error:'} ${errorMessage} (${errorLine}:${errorColumn})`;\n        });\n\n        message = lines.join('\\n');\n        message = message.replace(\n            /SyntaxError\\s+\\((\\d+):(\\d+)\\)\\s*(.+?)\\n/g,\n            `${'Syntax error:'} $3 ($1:$2)\\n`\n        );\n        message = message.replace(\n            /^.*export '(.+?)' was not found in '(.+?)'.*$/gm,\n            `Attempted import error: '$1' is not exported from '$2'.`\n        );\n        message = message.replace(\n            /^.*export 'default' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$/gm,\n            `Attempted import error: '$2' does not contain a default export (imported as '$1').`\n        );\n        message = message.replace(\n            /^.*export '(.+?)' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$/gm,\n            `Attempted import error: '$1' is not exported from '$3' (imported as '$2').`\n        );\n        lines = message.split('\\n');\n\n        if (lines.length > 2 && lines[1].trim() === '') {\n            lines.splice(1, 1);\n        }\n        lines[0] = lines[0].replace(/^(.*) \\d+:\\d+-\\d+$/, '$1');\n\n        if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\n            lines = [\n                lines[0],\n                lines[1]\n                    .replace('Error: ', '')\n                    .replace('Module not found: Cannot find file:', 'Cannot find file:'),\n            ];\n        }\n\n        if (lines[1] && lines[1].match(/Cannot find module.+node-sass/)) {\n            lines[1] = 'To import Sass files, you first need to install node-sass.\\n';\n            lines[1] +=\n                'Run `npm install node-sass` or `yarn add node-sass` inside your workspace.';\n        }\n\n        lines[0] = chalk.inverse(lines[0]);\n\n        message = lines.join('\\n');\n        message = message.replace(\n            /^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm,\n            ''\n        );\n        message = message.replace(/^\\s*at\\s<anonymous>(\\n|$)/gm, '');\n        lines = message.split('\\n');\n\n        // Remove duplicated newlines\n        lines = lines.filter(\n            (line, index, arr) =>\n                index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()\n        );\n\n        message = lines.join('\\n');\n        return message.trim();\n    }\n}"]}