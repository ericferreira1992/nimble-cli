{"version":3,"file":"build.js","sourceRoot":"","sources":["../../../src/commands/build/build.ts"],"names":[],"mappings":"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","sourcesContent":["import webpack from 'webpack';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport path from 'path';\nimport { inject, injectable } from 'inversify';\nimport { Logger } from '../../utils/logger.util';\nimport { ArgsResolver } from '../../core/args-resolver';\nimport { webpackConfig } from '../config/webpack.config';\nimport { CLI } from '../../cli';\nimport { formatWebpackMessages } from '../../core/dev-utils/format-webpack-msgs';\n\n@injectable()\nexport class Build {\n    private args!: ArgsResolver;\n\n    private DEFAULT_ENV = 'prod';\n    private WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;\n    private WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;\n\n    private get env() { return this.args.getValue('env', this.DEFAULT_ENV) as string; }\n    private get baseHref() { return this.args.getValue('baseHref', '') as string; }\n    private get gziped() { return this.args.getValue('gziped', '') as boolean; }\n\n    constructor(\n        @inject('Logger') private logger: Logger\n    ) {\n    }\n\n    public async execute(args: string[] = []) {\n        if (!CLI.isNimbleProject()) {\n            this.logger.showError('To continue you must be inside a Nimble project.');\n            process.exit(0);\n        }\n\n        this.args = new ArgsResolver(args);\n\n        let options = {\n            baseHref: this.baseHref,\n            gziped: this.gziped,\n        }\n\n        const config = await webpackConfig(this.env, options, true);\n\n        this.build(config)\n            .then(\n                ({ stats, warnings }) => {\n                    console.log(chalk.green('‚úî Compiled successfully!\\n'));\n\n                    let directoriesSplited = process.cwd().split(path.sep);\n                    console.log('‚úÖ Directory where the build is:', chalk.yellow(`${directoriesSplited[directoriesSplited.length - 1]}/build`));\n                    console.log();\n                },\n                err => {\n                    console.error(err);\n                    console.log('');\n\n                    const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n\n                    if (tscCompileOnError) {\n                        console.log(\n                            chalk.yellow(\n                                'Compiled with the following type errors (you may want to check these before deploying your app):\\n'\n                            )\n                        );\n                    } else {\n                        console.log(chalk.red('Failed to compile.\\n'));\n                        process.exit(1);\n                    }\n                }\n            );\n    }\n\n    private build(config: any) {\n        console.log('');\n\n        if (fs.existsSync(`${process.cwd()}/src/environments/env.${this.env}.js`)) {\n            console.log('‚öôÔ∏è Using environment:', chalk.yellow(`src/environments/env.${this.env}`));\n        }\n        else {\n            console.log('üíî Environment:', chalk.red('not found'));\n        }\n\n        console.log(chalk.cyan('üöÄ Await, creating an optimized production build...'));\n        console.log();\n\n        const compiler = webpack(config);\n        return new Promise<{ stats: any, warnings: string[] }>((resolve, reject) => {\n            compiler.run((err, stats) => {\n                let messages;\n                if (err) {\n                    if (!err.message) {\n                        return reject(err);\n                    }\n\n                    let errMessage = err.message;\n\n                    if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {\n                        errMessage +=\n                            '\\nCompileError: Begins at CSS selector ' +\n                            err['postcssNode'].selector;\n                    }\n\n                    messages = formatWebpackMessages({\n                        errors: [errMessage],\n                        warnings: [],\n                    });\n                }\n                else {\n                    messages = formatWebpackMessages(\n                        stats?.toJson({ all: false, warnings: true, errors: true })\n                    );\n                }\n                if (messages.errors.length) {\n                    return reject(new Error(messages.errors.join('\\n\\n')));\n                }\n\n                return resolve({ stats, warnings: messages.warnings });\n            });\n        });\n    }\n}"]}