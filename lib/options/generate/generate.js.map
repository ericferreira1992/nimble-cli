{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../../src/options/generate/generate.ts"],"names":[],"mappings":";;;;AAAA,8DAAgC;AAChC,uCAA+C;AAC/C,iCAAgC;AAMhC,6DAAsD;AAMtD;IACI,kBAC+B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAEzC,IAAI,SAAG,CAAC,eAAe,EAAE;YACrB,IAAI,CAAC,OAAO,EAAE,CAAC;aACd;YACD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,8CAA8C,CAAC,CAAC;YACtE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACnB;IACL,CAAC;IAEa,0BAAO,GAArB;;;;;4BAC2B,qBAAM,IAAI,CAAC,QAAQ,EAAE,EAAA;;wBAA9C,MAAM,GAAmB,SAAqB;wBAG5C,QAAO,MAAM,CAAC,KAAK,EAAE;4BACjB,KAAK,mCAAa,CAAC,IAAI;gCACnB,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAe,cAAc,CAAC,CAAC;gCACpD,MAAM;4BACV,KAAK,mCAAa,CAAC,MAAM;gCACrB,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAiB,gBAAgB,CAAC,CAAC;gCACxD,MAAM;4BACV,KAAK,mCAAa,CAAC,SAAS;gCACxB,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAoB,mBAAmB,CAAC,CAAC;gCAC9D,MAAM;4BACV,KAAK,mCAAa,CAAC,OAAO;gCACtB,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAkB,iBAAiB,CAAC,CAAC;gCAC1D,MAAM;4BACV,KAAK,mCAAa,CAAC,KAAK;gCACpB,QAAQ,GAAG,SAAG,CAAC,MAAM,CAAgB,eAAe,CAAC,CAAC;gCACtD,MAAM;yBACnB;wBAED,qBAAM,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,EAAE,CAAA,EAAA;;wBAAzB,SAAyB,CAAC;;;;;KACvB;IAEO,2BAAQ,GAAhB;QACI,OAAO,kBAAQ,CAAC,MAAM,CAAC,CAAC;gBACpB,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,qCAAqC;gBAC9C,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,mCAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,CAAC;oBACrD,IAAI,EAAG,mCAAqB,CAAC,GAAG,CAAC;oBACjC,KAAK,EAAG,mCAAqB,CAAC,GAAG,CAAC;iBACrC,CAAC,EAHsD,CAGtD,CAAC;aACN,CAAC,CAAC,CAAC;IACR,CAAC;IAAA,CAAC;IA/CO,QAAQ;QADpB,IAAA,sBAAU,GAAE;QAGJ,mBAAA,IAAA,kBAAM,EAAC,QAAQ,CAAC,CAAA;OAFZ,QAAQ,CAgDpB;IAAD,eAAC;CAAA,AAhDD,IAgDC","sourcesContent":["import inquirer from 'inquirer';\nimport { inject, injectable } from 'inversify';\nimport { CLI } from '../../cli';\nimport { QuestionAnswer } from '../../core/question-answer.model';\nimport { Logger } from '../../utils/logger.util';\nimport { BaseGenerate } from './base-generate';\nimport { DialogGenerate } from './dialog/dialog-generate';\nimport { DirectiveGenerate } from './directive/directive-generate';\nimport { GenerateTypes } from './generate-types.enum';\nimport { GuardGenerate } from './guard/guard-generate';\nimport { PageGenerate } from './page/page-generate';\nimport { ServiceGenerate } from './service/service-generate';\n\n@injectable()\nexport class Generate {\n    constructor(\n        @inject('Logger')  private logger: Logger\n    ) {\n        if (CLI.isNimbleProject())\n            this.execute();\n        else {\n            this.logger.showError('To continue you must be in a Nimble project.');\n            process.exit(0);\n        }\n    }\n\n    private async execute() {\n\t\tlet answer: QuestionAnswer = await this.question();\n\t\tlet generate: undefined | BaseGenerate;\n\n        switch(answer.value) {\n            case GenerateTypes.PAGE:\n                generate = CLI.inject<PageGenerate>('PageGenerate');\n                break;\n            case GenerateTypes.DIALOG:\n                generate = CLI.inject<DialogGenerate>('DialogGenerate');\n                break;\n            case GenerateTypes.DIRECTIVE:\n                generate = CLI.inject<DirectiveGenerate>('DirectiveGenerate');\n                break;\n            case GenerateTypes.SERVICE:\n                generate = CLI.inject<ServiceGenerate>('ServiceGenerate');\n                break;\n            case GenerateTypes.GUARD:\n                generate = CLI.inject<GuardGenerate>('GuardGenerate');\n                break;\n\t\t}\n\t\t\n\t\tawait generate?.execute();\n    }\n\n    private question(): Promise<QuestionAnswer> {\n        return inquirer.prompt([{ \n            name: 'value',\n            type: 'list',\n            message: 'Which what do you want to generate?',\n            choices: Object.keys(GenerateTypes).map((key, index) => ({\n                name: (GenerateTypes as any)[key],\n                value: (GenerateTypes as any)[key],\n            }))\n        }]);\n    };\n}"]}