{"version":3,"file":"process-for-port.js","sourceRoot":"","sources":["../../../src/core/dev-utils/process-for-port.ts"],"names":[],"mappings":";;;;AAAA,wDAA0B;AAC1B,+CAAyC;AACzC,sDAAwB;AAExB,IAAI,WAAW,GAAG;IACd,QAAQ,EAAE,MAAM;IAChB,KAAK,EAAE;QACH,MAAM;QACN,MAAM;QACN,QAAQ,EAAE,QAAQ;KACrB;CACJ,CAAC;AAEF,SAAS,kBAAkB,CAAC,cAAc;IACtC,OAAO,+CAA+C,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAChF,CAAC;AAED,SAAS,kBAAkB,CAAC,IAAI;IAC5B,OAAO,IAAA,wBAAQ,EAAC,UAAU,GAAG,IAAI,GAAG,qBAAqB,EAAE,WAAkB,CAAC;SACzE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACd,IAAI,EAAE,CAAC;AAChB,CAAC;AAED,SAAS,yBAAyB,CAAC,SAAS;IACxC,IAAI,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC;IAE9D,IAAI;QACA,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;KACpC;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,IAAI,CAAC;KACf;AACL,CAAC;AAED,SAAS,iBAAiB,CAAC,SAAS,EAAE,gBAAgB;IAClD,IAAI,OAAO,GAAG,IAAA,wBAAQ,EAClB,mBAAmB,GAAG,SAAS,GAAG,cAAc,EAChD,WAAkB,CACrB,CAAC;IAEF,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAErC,IAAI,kBAAkB,CAAC,OAAO,CAAC,EAAE;QAC7B,IAAM,WAAW,GAAG,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;QAChE,OAAO,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC;KAC9C;SAAM;QACH,OAAO,OAAO,CAAC;KAClB;AACL,CAAC;AAED,SAAS,yBAAyB,CAAC,SAAS;IACxC,OAAO,IAAA,wBAAQ,EACX,UAAU,GAAG,SAAS,GAAG,+DAA+D,EACxF,WAAkB,CACrB,CAAC,IAAI,EAAE,CAAC;AACb,CAAC;AAED,SAAgB,iBAAiB,CAAC,IAAI;IAClC,IAAI;QACA,IAAI,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,SAAS,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;QACrD,IAAI,OAAO,GAAG,iBAAiB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACtD,OAAO,CACH,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC;YACnB,eAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,SAAS,GAAG,KAAK,CAAC;YACxC,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC;YACnB,eAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC;KACL;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,IAAI,CAAC;KACf;AACL,CAAC;AAdD,8CAcC","sourcesContent":["import chalk from 'chalk';\nimport { execSync } from 'child_process';\nimport path from 'path';\n\nvar execOptions = {\n    encoding: 'utf8',\n    stdio: [\n        'pipe', // stdin (default)\n        'pipe', // stdout (default)\n        'ignore', //stderr\n    ],\n};\n\nfunction isProcessAReactApp(processCommand) {\n    return /^node .*react-scripts\\/scripts\\/start\\.js\\s?$/.test(processCommand);\n}\n\nfunction getProcessIdOnPort(port) {\n    return execSync('lsof -i:' + port + ' -P -t -sTCP:LISTEN', execOptions as any)\n        .split('\\n')[0]\n        .trim();\n}\n\nfunction getPackageNameInDirectory(directory) {\n    var packagePath = path.join(directory.trim(), 'package.json');\n\n    try {\n        return require(packagePath).name;\n    } catch (e) {\n        return null;\n    }\n}\n\nfunction getProcessCommand(processId, processDirectory) {\n    var command = execSync(\n        'ps -o command -p ' + processId + ' | sed -n 2p',\n        execOptions as any\n    );\n\n    command = command.replace(/\\n$/, '');\n\n    if (isProcessAReactApp(command)) {\n        const packageName = getPackageNameInDirectory(processDirectory);\n        return packageName ? packageName : command;\n    } else {\n        return command;\n    }\n}\n\nfunction getDirectoryOfProcessById(processId) {\n    return execSync(\n        'lsof -p ' + processId + ' | awk \\'$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}\\'',\n        execOptions as any\n    ).trim();\n}\n\nexport function getProcessForPort(port) {\n    try {\n        var processId = getProcessIdOnPort(port);\n        var directory = getDirectoryOfProcessById(processId);\n        var command = getProcessCommand(processId, directory);\n        return (\n            chalk.cyan(command) +\n            chalk.grey(' (pid ' + processId + ')\\n') +\n            chalk.blue('  in ') +\n            chalk.cyan(directory)\n        );\n    } catch (e) {\n        return null;\n    }\n}"]}